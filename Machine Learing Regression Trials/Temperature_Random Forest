import pandas as pd
import biom
import multiprocessing
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

def load_biom_as_dataframe(biom_path):
    """Load a .biom file and return as a pandas DataFrame."""
    print("Loading .biom file...")
    biom_table = biom.load_table(biom_path)
    return biom_table.to_dataframe().transpose()

# Load your datasets here
biom_df = load_biom_as_dataframe(".../emp_deblur_90bp.subset_2k.biom")
print("BIOM file loaded successfully.")

print("Loading mapping file...")
mapping_df = pd.read_csv(".../emp_qiime_mapping_subset_2k.tsv", sep="\t")
print("Mapping file loaded successfully.")

print("Aligning the features and target variable...")
merged_df = biom_df.join(mapping_df.set_index('#SampleID')['temperature_deg_c'])
merged_df = merged_df.dropna(subset=['temperature_deg_c'])
print("Alignment done.")

print("Splitting data into training and test sets...")
X = merged_df.drop(columns=['temperature_deg_c'])
y = merged_df['temperature_deg_c']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print("Data splitting done.")

print("Training the Random Forest regressor...")
# Using all available cores with n_jobs=-1
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
rf_regressor.fit(X_train, y_train)
print("Training done.")

print("Predicting on the test set...")
y_pred = rf_regressor.predict(X_test)
print("Prediction done.")

print("Calculating regression metrics...")
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)

print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

print("Calculating feature importance...")
feature_importances = rf_regressor.feature_importances_
features_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})
print(features_df.sort_values(by='Importance', ascending=False).head(10))
import pdb; pdb.set_trace()


'''
Loading .biom file...
BIOM file loaded successfully.
Loading mapping file...
Mapping file loaded successfully.
Aligning the features and target variable...
Alignment done.
Splitting data into training and test sets...
Data splitting done.
Training the Random Forest regressor...
Training done.
Predicting on the test set...
Prediction done.
Calculating regression metrics...
Mean Absolute Error (MAE): 5.765232909995807
Mean Squared Error (MSE): 141.04475900718097
R-squared (R2): 0.4809743433018341
Calculating feature importance...
                                                  Feature  Importance
26931   TACGTAGGGGGCGAGCGTTGCCCGAATTTACTGGGCGTAAAGCGCA...    0.234045
300153  TACGGAGGGCGCGAGCGTTACCCGGATTTACTGGGCGTAAAGGGCG...    0.084385
242127  TACGGAGGGTGCAAGCGTTACTCGGAATCACTGGGCGTAAAGGATG...    0.053634
101152  TACGGAGACCTCGAGCGTTACTCGGATTTACTGGGCGTAAAGGGTT...    0.028110
122075  TACGGAGGGTCCGAGCGTTATCCGGAATTATTGGGTTTAAAGGGTC...    0.020389
221697  TACGTAGGGGGCGAGCGTTGCCCGAATTTACTGGGCGTAAAGCGCA...    0.020287
39457   TACGGAGGATCCAAGCGTTATCCGGATTTATTGGGTTTAAAGGGTG...    0.018416
89730   TACGGGGGGTGCAAGCGTTAATCGGAGTTATTGGGCGTAAAGGGTG...    0.012799
255812  GACGGAGGGGGCTAGCGTTGTTCGGAATTACTGGGCGTAAAGGGCG...    0.012321
137941  GACGTAGGGCGCAAGCGTTACCCGGAGTTACTGGGCTTAAAGGGTC...    0.012137
--Return--
'''
