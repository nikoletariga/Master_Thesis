import pandas as pd
import biom
from sklearn.model_selection import train_test_split
from sklearn.ensemble import RandomForestRegressor
from sklearn.metrics import mean_absolute_error, mean_squared_error, r2_score

def load_biom_as_dataframe(biom_path):
    """Load a .biom file and return as a pandas DataFrame."""
    print("Loading .biom file...")
    biom_table = biom.load_table(biom_path)
    return biom_table.to_dataframe().transpose()

# Load your datasets here
biom_df = load_biom_as_dataframe(".../emp_deblur_90bp.subset_2k.biom")
print("BIOM file loaded successfully.")

print("Loading mapping file...")
mapping_df = pd.read_csv(".../emp_qiime_mapping_subset_2k.tsv", sep="\t")
print("Mapping file loaded successfully.")

print("Aligning the features and target variable...")
merged_df = biom_df.join(mapping_df.set_index('#SampleID')['salinity_psu'])
merged_df = merged_df.dropna(subset=['salinity_psu'])
print("Alignment done.")

print("Splitting data into training and test sets...")
X = merged_df.drop(columns=['salinity_psu'])
y = merged_df['salinity_psu']
X_train, X_test, y_train, y_test = train_test_split(X, y, test_size=0.3, random_state=42)
print("Data splitting done.")

print("Training the Random Forest regressor...")
# Using all available cores with n_jobs=-1
rf_regressor = RandomForestRegressor(n_estimators=100, random_state=42, n_jobs=-1)
rf_regressor.fit(X_train, y_train)
print("Training done.")

# Evaluate model on training data
y_train_pred = rf_regressor.predict(X_train)
mae_train = mean_absolute_error(y_train, y_train_pred)
mse_train = mean_squared_error(y_train, y_train_pred)
r2_train = r2_score(y_train, y_train_pred)
print(f"\nTraining Data Metrics:")
print(f"Mean Absolute Error (MAE): {mae_train}")
print(f"Mean Squared Error (MSE): {mse_train}")
print(f"R-squared (R2): {r2_train}\n")

print("Predicting on the test set...")
y_pred = rf_regressor.predict(X_test)
print("Prediction done.")

print("Calculating regression metrics for test data...")
mae = mean_absolute_error(y_test, y_pred)
mse = mean_squared_error(y_test, y_pred)
r2 = r2_score(y_test, y_pred)
print(f"Mean Absolute Error (MAE): {mae}")
print(f"Mean Squared Error (MSE): {mse}")
print(f"R-squared (R2): {r2}")

print("Calculating feature importance...")
feature_importances = rf_regressor.feature_importances_
features_df = pd.DataFrame({
    'Feature': X.columns,
    'Importance': feature_importances
})
print(features_df.sort_values(by='Importance', ascending=False).head(10))

import pdb; pdb.set_trace()


'''
Loading .biom file...
BIOM file loaded successfully.
Loading mapping file...
Mapping file loaded successfully.
Aligning the features and target variable...
Alignment done.
Splitting data into training and test sets...
Data splitting done.
Training the Random Forest regressor...
Training done.

Training Data Metrics:
Mean Absolute Error (MAE): 1.0602185654761835
Mean Squared Error (MSE): 3.7265057094890377
R-squared (R2): 0.977138602522907

Predicting on the test set...
Prediction done.
Calculating regression metrics for test data...
Mean Absolute Error (MAE): 3.655770810810804
Mean Squared Error (MSE): 40.426543300485044
R-squared (R2): 0.7679474803474186
Calculating feature importance...
                                                  Feature  Importance
233141  TACGAAGGGGGCTAGCGTTGTTCGGATTTACTGGGCGTAAAGCGCA...    0.124843
80989   TACGAAGGGGGCTAGCGTTGTTCGGAATTACTGGGCGTAAAGCGCA...    0.122154
73155   TACGGAGGGGGCTAGCGTTGTTCGGAATTACTGGGCGTAAAGCGCG...    0.116074
14304   TACGAAGGGGGCTAGCGTTGCTCGGAATCACTGGGCGTAAAGGGTG...    0.065340
23737   TACGGAGGGTGCAAGCGTTATCCGGATTTACTGGGTTTAAAGGGTG...    0.057315
311727  TACGAAGGGGGCTAGCGTTGCTCGGAATTACTGGGCGTAAAGGGCG...    0.052257
50017   TACGAAGGGGGCTAGCGTTGTTCGGAATTACTGGGCGTAAAGCGCG...    0.038338
125955  TACATAGGCTTCAAGCGTTGTCCGGATTTATTGGGCGTAAAGAGTT...    0.036370
180193  TACATAGGCTCCAAGCGTTGTTCGGAATTACTGGGCGTAAAGCGAG...    0.028859
16575   TACGAAGGGGGCTAGCGTTGCTCGGAATTACTGGGCGTAAAGCGCA...    0.027705
--Return--
'''
